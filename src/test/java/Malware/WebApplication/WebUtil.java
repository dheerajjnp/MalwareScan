package Malware.WebApplication;

import java.io.BufferedWriter;
import java.io.FileWriter;

import java.util.Date;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.apache.log4j.Logger;

import org.openqa.selenium.By;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;

import org.openqa.selenium.WebElement;

import org.openqa.selenium.interactions.Actions;

import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

public class WebUtil {
	 static WebDriver driver;
	Logger logger = Logger.getLogger(MalwareScanTest.class);
	WebUtil webUtil;
	String url = "";
	static ExtentTest test;
	static ExtentReports extent;

	public void holdOn(int timeOutInSeconds) {
		try {
			long time = (long) 1000 * timeOutInSeconds;
			Thread.sleep(time);
		} catch (Exception e) {

		}
	}

	public WebDriver driver() {

		return driver;
	}

	public WebElement getElement(WebElement element) {
		WebElement we = null;
		By locator = null;

		element = driver.findElement(locator);

		return we;
	}

	public WebDriver getDriver() {
		return driver;
	}

	public String getUrl() {
		String urlname = driver.getCurrentUrl();
		System.out.println(urlname + " has been entered successfully");
		return urlname;

	}

	public void workSuccessfully() {
		String url = getUrl();
		System.out.println(url + "header link has been workrd successfully");

	}

	public void clickandprinttext(WebElement element) throws Exception {
		FileWriter fr = new FileWriter("Malwarescanreport.txt", true);
		BufferedWriter br = new BufferedWriter(fr);

		try {
			waitUntilElementIsVisible(element, 60);
			String gettext = element.getText();
			waitUntilElementIsVisible(element, 60);
			getJSExecutor().executeScript("arguments[0].click()", element);

			String msg = gettext + "  has been clicked Successfully";
			// waitForBrowserToLoadCompletely();
			test.log(LogStatus.INFO, msg);

			logger.info(msg);
			br.write(msg);
			br.newLine();
			br.close();

		} catch (Exception e) {

			e.printStackTrace();
			webUtil.driver.navigate().refresh();
			test.log(LogStatus.FAIL, "<p style=" + '"' + "color:red;font-weight:bold" + '"' + ">" + e + "</p>");

		}

	}

	public void jsClick(WebElement element) throws Exception {
		try {
			waitUntilElementIsVisible(element, 60);
			getJSExecutor().executeScript("arguments[0].click()", element);
			FileWriter fr = new FileWriter("Malwarescanreport.txt", true);
			BufferedWriter br = new BufferedWriter(fr);

			String msg = element + "  has been clicked Successfully";
			// waitForBrowserToLoadCompletely();
			test.log(LogStatus.INFO, msg);
			logger.info(msg);
			br.write(msg);
			br.newLine();
			br.close();

		} catch (Exception e) {

			e.printStackTrace();
			test.log(LogStatus.FAIL, "<p style=" + '"' + "color:red;font-weight:bold" + '"' + ">" + e + "</p>");

		}

	}
	
	
	
	
	
	
	
	
	

	public void jsClick(WebElement element, String elementName) throws Exception {
		try {
			waitUntilElementIsVisible(element, 60);

			getJSExecutor().executeScript("arguments[0].click()", element);
			FileWriter fr = new FileWriter("Malwarescanreport.txt", true);
			BufferedWriter br = new BufferedWriter(fr);

			String msg = elementName + "  has been clicked Successfully";
			// waitForBrowserToLoadCompletely();
			test.log(LogStatus.INFO, msg);
			logger.info(msg);
			br.write(msg);
			br.newLine();
			br.close();

		} catch (Exception e) {
			e.printStackTrace();
			test.log(LogStatus.FAIL, "<p style=" + '"' + "color:red;font-weight:bold" + '"' + ">" + e + "</p>");

		}

	}

	public String setTextBoxValue(WebElement element, String textToInput, String elementName) throws Exception {
		waitUntilElementIsVisible(element, 30);
		try {

			element.clear();

			element.sendKeys(textToInput);
			element.sendKeys(Keys.ENTER);

		} catch (Exception e) {

			webUtil.waitForBrowserToLoadCompletely();

			test.log(LogStatus.FAIL, "<p style=" + '"' + "color:red;font-weight:bold" + '"' + ">" + e + "</p>");
		}
		String msg = textToInput + " has been entered in " + elementName + " successfully";
		test.log(LogStatus.INFO, msg);

		return textToInput;
	}

	public void jsSetTextBoxValue(WebElement element, String value) {
		// se.executeScript("arguments[0].value='compliance edit';",
		// smsTitleBox);
		getJSExecutor().executeScript("arguments[0].value='" + value + "'", element);

	}

	public void actionSetTextBoxValue(WebElement element, String value) throws Exception {

		Actions action = new Actions(WebUtil.driver);
		// action.doubleClick();
		Thread.sleep(2000);
		action.sendKeys(element, value).build().perform();

	}

	public String setTextBoxValueByKey(WebElement element, String textToInput, String elementName) throws Exception {
		waitUntilElementIsVisible(element, 30);
		try {

			new Actions(driver).sendKeys(element, textToInput).sendKeys(Keys.ARROW_LEFT).keyDown(Keys.SHIFT)
					.sendKeys(Keys.ARROW_UP).keyUp(Keys.SHIFT)

					.sendKeys(textToInput)

					.perform();

			// element.sendKeys(textToInput);

		} catch (Exception e) {

			// webUtil.waitForBrowserToLoadCompletely();

			test.log(LogStatus.FAIL, "<p style=" + '"' + "color:red;font-weight:bold" + '"' + ">" + e + "</p>");
		}
		String msg = textToInput + " has been entered in " + elementName + " successfully";
		test.log(LogStatus.INFO, msg);

		return textToInput;
	}

	public String getText(WebElement we) {
		String getTextValue = we.getText();

		return getTextValue;

	}

	public void mouseOver(WebElement element, String elementmsg) {

		try {

			Actions action = new Actions(webUtil.driver).moveToElement(element);
			action.build().perform();

			String msg = "MouseOver performed on " + elementmsg + " Successfully";
			test.log(LogStatus.INFO, msg);
			logger.info(msg);

		} catch (Exception e) {
			logger.info(e);
			element = webUtil.getElement(element);
			Actions action = new Actions(webUtil.driver).moveToElement(element);
			action.build().perform();
		}

	}

	public void verifyText(String actualValue, String expectedValue, String validationName) {

		try {

			if (actualValue.equalsIgnoreCase(expectedValue.trim())) {
				test.log(LogStatus.PASS, "<p style=" + '"' + "color:green;font-weight:bold" + '"' + ">" + validationName
						+ " Passed. Expected Value:-" + expectedValue + "  ,  Actual Value:-" + actualValue + "</p>");
				logger.info(validationName + " Passed. Expected Value: " + expectedValue + "  ,  Actual Value: "
						+ actualValue);
			} else {
				test.log(LogStatus.FAIL, "<p style=" + '"' + "color:red;font-weight:bold" + '"' + ">" + validationName
						+ " Failed. Expected Value:-" + expectedValue + "  ,  Actual Value:-" + actualValue + "</p>");

				// Assert.assertEquals(actualValue, expectedValue);

				logger.info(validationName + " Failed. Expected Value:-" + expectedValue + "  ,  Actual Value:-"
						+ actualValue);

			}
		} catch (Exception e) {
			test.log(LogStatus.FAIL, "<p style=" + '"' + "color:red;font-weight:bold" + "</p>" + e);

			logger.info(
					validationName + " Failed. Expected Value:-" + expectedValue + "  ,  Actual Value:-" + actualValue);
		}

	}

	public JavascriptExecutor getJSExecutor() {
		return ((JavascriptExecutor) webUtil.driver);

	}

	public void waitUntilElementIsVisible(WebElement we, int wait) {
		webUtil.driver.manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);
		for (int i = 0; i <= wait; i++) {
			try {
				Thread.sleep(200);
				if (we.getSize().getHeight() > 0 && we.getSize().getWidth() > 0 && we.isEnabled()) {

					break;
				}
			} catch (Exception e) {

			}

		}

		webUtil.driver.manage().timeouts().implicitlyWait(40, TimeUnit.SECONDS);

	}

	public void switchWindowFocusByTitle(String title) {
		try {
			Set<String> handleValues = driver.getWindowHandles();
			for (String handleValue : handleValues) {
				driver.switchTo().window(handleValue);
				
				if (driver.getTitle().trim().equalsIgnoreCase(title)) {
					break;
				}
			}
		} catch (Exception e) {
			// logger.debug( Constants.ELEMENT_SEARCH_ERROR_MESSAGE, e);
		}
	}

	public String openUrl(String url, String methodname) throws Exception {
		try {
			FileWriter fr = new FileWriter("Malwarescanreport.txt", true);
			BufferedWriter br = new BufferedWriter(fr);
			Date date = new Date();
			String dates = date.toString();
			test = extent.startTest(url, methodname);
			test.log(LogStatus.INFO, dates);

			driver.get(url);

			String methodName = methodname;
			String msg = "*****Malware scan initiated for " + methodname + "************** ";

			logger.info(msg);
			br.write(msg);
			br.newLine();
			logger.info(url + " has been entered successfully");
			br.write(url + " has been entered successfully");

			test.log(LogStatus.INFO, url + " has been entered successfully");
			br.newLine();
			br.close();
		} catch (Throwable e) {
			e.printStackTrace();
			test.log(LogStatus.FAIL, "<p style=" + '"' + "color:red;font-weight:bold" + '"' + ">" + e + "</p>");

		}

		return methodname;

	}

	public void successmsg(String methodName) throws Exception {

		FileWriter fr = new FileWriter("Malwarescanreport.txt", true);
		BufferedWriter br = new BufferedWriter(fr);

		String msg = "*****" + methodName + "  header functionality worked successfully ******************";

		logger.info(msg);

		test.log(LogStatus.INFO, msg);

		br.write(msg);
		br.newLine();
		br.close();

	}

	public void mouseOver(WebElement element) {

		try {

			Actions action = new Actions(driver);
			action.click(element).build().perform();
			String gettext = element.getText();

			String msg = "Mouseover performed on " + gettext + " Successfully";

			logger.info(msg);
			test.log(LogStatus.INFO, msg);
		} catch (Exception e) {

			e.printStackTrace();
			test.log(LogStatus.FAIL, "<p style=" + '"' + "color:red;font-weight:bold" + '"' + ">" + e + "</p>");

		}
	}

	public boolean loadBrowser() {
		String state = null;
		int i = 0;
		while (i < 5) {

			state = ((JavascriptExecutor) driver).executeScript("return document.readyState;").toString();
			if ("interactive".equals(state) || "loading".equals(state))
				break;
			if (i == 1 && "complete".equals(state)) {

				return true;
			}
			i++;
		}
		return false;
	}

	public void waitForBrowserToLoadCompletely() {
		String state = null;
		String oldstate = null;
		String waitingMsg = "Waiting for browser loading to complete";
		if (loadBrowser()) {
			return;
		}
		logger.info(waitingMsg);
		int i = 0;

		while (true) {
			state = ((JavascriptExecutor) driver).executeScript("return document.readyState;").toString();
			if ("complete".equals(state))
				break;

			if (state.equals(oldstate))
				i++;
			else
				i = 0;
			if (i == 15 && "loading".equals(state)) {
				driver.navigate().refresh();
				logger.info(waitingMsg);
				i = 0;
			} else if (i == 6 && "interactive".equals(state)) {
				logger.info(waitingMsg);
				return;
			}
			oldstate = state;
		}

	}

	public void click(WebElement element, String elementName) throws Exception {
		try {
			waitUntilElementIsVisible(element, 60);
			getJSExecutor().executeScript("arguments[0].click()", element);
			FileWriter fr = new FileWriter("Malwarescanreport.txt", true);
			BufferedWriter br = new BufferedWriter(fr);

			String msg = elementName + "  has been clicked Successfully";

			logger.info(msg);
			test.log(LogStatus.INFO, msg);
			br.write(msg);
			br.newLine();
			br.close();
		} catch (Exception e) {
			e.printStackTrace();
			webUtil.driver.navigate().refresh();
			test.log(LogStatus.FAIL, "<p style=" + '"' + "color:red;font-weight:bold" + '"' + ">" + e + "</p>");

		}

	}

	public void clickAndHold(WebElement element, String elementName) throws Exception {
		try {
			waitUntilElementIsVisible(element, 60);
			Actions action = new Actions(webUtil.driver());
			action.clickAndHold(element);
			FileWriter fr = new FileWriter("Malwarescanreport.txt", true);
			BufferedWriter br = new BufferedWriter(fr);

			String msg = elementName + "  has been clicked Successfully";

			logger.info(msg);
			test.log(LogStatus.INFO, msg);
			br.write(msg);
			br.newLine();
			br.close();
		} catch (Exception e) {
			e.printStackTrace();
			webUtil.driver.navigate().refresh();
			test.log(LogStatus.FAIL, "<p style=" + '"' + "color:red;font-weight:bold" + '"' + ">" + e + "</p>");

		}

	}
	// public void click(WebElement element) throws Exception{
	// getJSExecutor().executeScript("arguments[0].click()", element);
	// FileWriter fr = new FileWriter("Malwarescanreport.txt", true);
	// BufferedWriter br = new BufferedWriter(fr);
	//
	//
	// try{
	// element.click();
	// }catch(StaleElementReferenceException e){
	//
	// element.click();
	//
	// }catch(ElementClickInterceptedException e){
	//
	// element.click();
	//
	// }catch(ElementNotVisibleException e){
	//
	// element.click();
	//
	// }catch(WebDriverException e){
	//
	// getJSExecutor().executeScript("arguments[0].click()", element);
	//
	//
	// }
	//
	// String msg = element + " has been clicked Successfully";
	// logger.info(msg);
	// br.write(msg);
	// br.newLine();
	// br.close();
	//
	//
	// }
	// public void clickandprint(WebElement element) throws Exception {
	// FileWriter fr = new FileWriter("Malwarescanreport.txt", true);
	// BufferedWriter br = new BufferedWriter(fr);
	//
	// try {
	// waitUntilElementIsVisible(element, 20);
	// element.click();
	//
	// } catch (Exception e) {
	// waitUntilElementIsVisible(element, 20);
	// getJSExecutor().executeScript("arguments[0].click()", element);
	//
	// }
	//
	//
	// String gettext = element.getText();
	// String msg = gettext + " has been clicked Successfully";
	// waitForBrowserToLoadCompletely();
	//
	// logger.info(msg);
	// br.write(msg);
	// br.newLine();
	// br.close();
	//
	// }

}
